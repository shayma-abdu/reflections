When would you want to use a remote repository rather than keeping all your work local?

When I want to collaborate with others or I want to share what I was working on with other people.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

Because The points in time that I would choose to manually pull changes, will most probably make more logical sense. Also if Git autaomatically updates, it might update files or logical aspects you are currently working on locally.

Describe the differences between forks, clones, and branches. When would you use one instead of the other.

clones are copies of either Github repositories made locally or copies of other local repositories also stored locally. forkes are copies of repositories on github to be copied to another account on github as well. Forkes are used when github users want to use and build on the repositories of other github users, however since their changes are not yet considered part of the main official code, it is not added to the original repository as a collaboration. Branches are labels added to commits. they are used when in the same repository the programmer wants to explor new ideas or directions but doesnt want to commit it to the master branch. 

What is the benefit of having a copy of the last known state of the remote stored locally?

This will help in the cases where there are different commits done locally and on the remote. in this case the copy could be updated with the last commit using fetch and using log or diff could show the differences between the commits done locally and remotely. It could also be a good idea to have all recent changes made remotely as a copy locally without merging, incase you need to go offline for some time. 

How would you collaborate without using Git or Github? what would be easier, and what would be harder?

I could use a cloud service such as google docs, it would be easier in the case of that the collaboration on a small project involving collaborating on text. otherwise in the case that the collaboration is done on more complex projects involving code, it would be harder to track changes, merge different versions of the codes and so on. 

When would you want to make changes in a separate branch rather than directly in master? what benefits does each approach have?

When you want to keep the master branch up-to-date with the master in the original repository, and only merge changes from the branch to the branch only when the feature or the aspect you are working on is ready. it is easier in terms of the steps to be taken to make all changes directly in master, however for clarity and keeping files up to date, accessable and organized it is better to make changes in a seperate branch rather than directly in master.  



